
%Face/body recognition experiment
%% set up experimental parameters
%initiate random number generator
Screen('Preference', 'SkipSyncTests', 1);  %possible fix for screen error?
rand('twister',sum(100*clock));
%directories
stimuli_dir=[pwd '/pics'];
data_dir=[pwd '/DATA Face Body'];
functions_dir=[pwd '/functions'];
addpath(functions_dir);
NoiseMaskImageSize=[800 800]; %Change it to the size to the stimulus
%input subject id 
subj_id=input('Subject ID:','s');
%set stimuli path according to experimental condition, face or house
Condition=input('Experimental Condition, 1 for Geology, 2 for Fiction:','s');
if str2double(Condition)==1 % condition 1, Face
    stimuli_dir=[stimuli_dir '/geology_pics'];
    imgload_stim_dir='../pics/geology_pics';
elseif str2double(Condition)==2 % condition 2, House
    stimuli_dir=[stimuli_dir '/Body'];
    imgload_stim_dir='../stimuli/Body';
end


%open a data file with subject id and condition as part of the file name
datafile=fopen([data_dir '/' subj_id '_Condition' Condition '_' date '.txt'],'a+');
%write the header line in the data file
fprintf(datafile, 'Session Trial TargetID ImageVersion DistractorID Response Correct ResposeTime\n');
%Session: 0-training, 1-testing;
%Response: 1-left, 2-right; 
%Example, for training trials, response and correct are not recorded,
%FoilID is 0
%Session Trial TargetID ImageVersion DistractorID  Response Correct ResponseTime
%0       10      14        1            0              0      0        0
%Example testing trials
%Session Trial TargetID ImageVersion DistractorID  Response Correct ResponseTime
%1       10      14         1           18            1      1         1.22
%1       11      12         2           13            2      0         1.34

% STEP 1
% Added a dialog box to set your own EDF file name before opening 
% experiment graphics. Make sure the entered EDF file name is 1 to 8 
% characters in length and only numbers or letters are allowed.

prompt = {'Enter tracker EDF file name (1 to 8 letters or numbers)'};
dlg_title = 'Create EDF file';
num_lines= 1;
def     = {'DEMO'};
answer  = inputdlg(prompt,dlg_title,num_lines,def);
%edfFile= 'DEMO.EDF'
edfFile = answer{1};
fprintf('EDFFile: %s\n', edfFile );
%end

% %% Experimental Design
% nTarget=12;          %number of targets
% nDistractor=12;      %number of distractors
% nTrials_training=nTarget;
% nTrials_testing=nTarget;
% 
% AllImages=randperm(nTarget*2); %generate a random sequence
% Targets=AllImages(1:nTarget);        %select the target images
% Distractors=AllImages(nTarget+1:nTarget*2); %select the distractor images
% 
% 
% %training trials
% Design_training=zeros(nTrials_training,2);
% Design_training(:,1)=Targets';              %image ID
% Design_training(:,2)=randi(2,[nTarget 1]);  %image verion
% 
% %testing trials
% Design_testing=zeros(nTrials_testing,5);
% %targets
% Design_testing(1:nTarget,1)=Design_training(:,1);   %target image ID
% Design_testing(1:nTarget,2)=3-Design_training(:,2); %target image version
% %distractors
% Design_testing(1:nTarget,3)=Distractors';%distractor image ID
% Design_testing(1:nTarget,4)=randi(2,[nDistractor 1]);   %distractor image version
% %target and distractor position
% Design_testing(1:nTarget,5)=randi(2,[nDistractor 1]);
% %randomize the trial sequence
% Design_testing=Design_testing(randperm(nTrials_testing),:);
% 
% %experiment timing
fixation_duration=.5;
Training_duration=2; %used to be 15
NoiseMask_duration=1;
Training_ISI=1;
% Testing_ISI=1;


dummymode=0;
%% initial a psychtoolbox on screen window
screenNum=0;  %0 for native screen, 1 for external monitor
[wPtr, rect]=Screen('OpenWindow', screenNum);

ifi=Screen('GetFlipInterval',wPtr);
HideCursor;

% STEP 3
% Provide Eyelink with details about the graphics environment
% and perform some initializations. The information is returned
% in a structure that also contains useful defaults
% and control codes (e.g. tracker state bit and Eyelink key values).
% el=EyelinkInitDefaults(wPtr);
% 
% % STEP 4
% % Initialization of the connection with the Eyelink Gazetracker.
% % exit program if this fails.
% if ~EyelinkInit(dummymode)
%     fprintf('Eyelink Init aborted.\n');
%     cleanup;  % cleanup function
%     return;
% end
% 
% % the following code is used to check the version of the eye tracker
% % and version of the host software
% 
% [v vs]=Eyelink('GetTrackerVersion');
% fprintf('Running experiment on a ''%s'' tracker.\n', vs );
% 
% % open file to record data to
% i = Eyelink('Openfile', edfFile);
% if i~=0
%     fprintf('Cannot create EDF file ''%s'' ', edffilename);
%     Eyelink( 'Shutdown');
%     Screen('CloseAll');
%     return;
% end
% 
% Eyelink('command', 'add_file_preamble_text ''York University Body Type Study''');
[width, height]=Screen('WindowSize', screenNum);
% 
% 
% % STEP 5    
% % SET UP TRACKER CONFIGURATION
% % Setting the proper recording resolution, proper calibration type, 
% % as well as the data file content;
% Eyelink('command','screen_pixel_coords = %ld %ld %ld %ld', 0, 0, width-1, height-1);
% Eyelink('message', 'DISPLAY_COORDS %ld %ld %ld %ld', 0, 0, width-1, height-1);                
% % set calibration type.
% Eyelink('command', 'calibration_type = HV9');
% % set parser (conservative saccade thresholds)
% 
% % set EDF file contents using the file_sample_data and
% % file-event_filter commands
% % set link data thtough link_sample_data and link_event_filter
% Eyelink('command', 'file_event_filter = LEFT,RIGHT,FIXATION,SACCADE,BLINK,MESSAGE,BUTTON,INPUT');
% Eyelink('command', 'link_event_filter = LEFT,RIGHT,FIXATION,SACCADE,BLINK,MESSAGE,BUTTON,INPUT');
% 
% % check the software version
% % add "HTARGET" to record possible target data for EyeLink Remote
% 
% Eyelink('command', 'file_sample_data  = LEFT,RIGHT,GAZE,AREA,HTARGET,GAZERES,STATUS,INPUT');
% Eyelink('command', 'link_sample_data  = LEFT,RIGHT,GAZE,GAZERES,AREA,HTARGET,STATUS,INPUT');
% 
% 
% % allow to use the big button on the eyelink gamepad to accept the 
% % calibration/drift correction target
% Eyelink('command', 'button_function 5 "accept_target_fixation"');
% 
% 
% % make sure we're still connected.
% if Eyelink('IsConnected')~=1 && dummymode == 0
%     fprintf('not connected, clean up\n');
%     Eyelink( 'Shutdown');
%     Screen('CloseAll');
%     return;
% end
% 
% % STEP 6
% % Calibrate the eye tracker
% % setup the proper calibration foreground and background colors
% el.backgroundcolour = [140 140 140];
% el.calibrationtargetcolour = [0 0 0];
% 
% % parameters are in frequency, volume, and duration
% % set the second value in each line to 0 to turn off the sound
% el.cal_target_beep=[600 0.5 0.05];
% el.drift_correction_target_beep=[600 0.5 0.05];
% el.calibration_failed_beep=[400 0.5 0.25];
% el.calibration_success_beep=[800 0.5 0.25];
% el.drift_correction_failed_beep=[400 0.5 0.25];
% el.drift_correction_success_beep=[800 0.5 0.25];
% % you must call this function to apply the changes from above
% EyelinkUpdateDefaults(el);

% Hide the mouse cursor;
Screen('HideCursorHelper', wPtr);
%Put Host PC and Display PC into Camera Setup mode so that you can
%calibrate the subject
% EyelinkDoTrackerSetup(el);

gray=140;%background grayscale level, could be changed to a value of choice
fontSize=40;
Screen('FillRect', wPtr, gray); %fill the screen with gray value 
Screen('Flip',wPtr);

fixation=fixationcross(20,2,gray);
NoiseMask=uint8(randn(NoiseMaskImageSize)*50+gray); 



for i=1:4
imagePointer = strcat(imgload_stim_dir,'/', 'Geology-', num2str(i),'.png');
disp(imagePointer);
ImgName=[stimuli_dir '/' 'Geology-' num2str(i) '.png'];
% end
Img=imread(ImgName);
% disp(Img)
% Screen('CloseAll');
% a();
% Img=imresize(Img,0.7);
%display fixation cross
ImgDsp(fixation,wPtr,fixation_duration,gray,ifi,1,'None',0,0);
%display the current image for Training duration
ImgDsp(Img,wPtr,Training_duration,gray,ifi,2,imagePointer,width,height);
%display noise mask
% ImgDsp(NoiseMask,wPtr,NoiseMask_duration,gray,ifi,3,'None',0,0);
%Write the trial information
% fprintf(datafile,'%d %d %d %d %d %d %d %2.4f\n',0,i,Design_training(i,1),Design_training(i,2),0,0,0,0);
% WaitSecs(0.1);
% stop the recording of eye-movements for the current trial
% Eyelink('StopRecording');
% Eyelink('Message', 'TRIAL_RESULT 0')
%ISI
WaitSecs(Training_ISI);
end

Screen('CloseAll');
a();

%press space bar to start the experiment
Screen('TextSize',wPtr,fontSize);
DrawFormattedText(wPtr, 'Press the space bar to start training', 'center', 'center', 0);
Screen('Flip',wPtr);
 while 1
    [ keyIsDown, Secs, keyCode ] = KbCheck;%check key press
     if keyIsDown
                if keyCode(44) %keycode 32 is Space bar. Mac 44
                    while KbCheck; end %wait till release key press, only one key press is recognized
                    break;
                end
     end
 end
 
%make a fixation cross
fixation=fixationcross(20,2,gray);
NoiseMask=uint8(randn(NoiseMaskImageSize)*50+gray); 


% STEP 7
% Now starts running individual trials;
% You can keep the rest of the code except for the implementation
% of graphics and event monitoring 
% Each trial should have a pair of "StartRecording" and "StopRecording" 
% calls as well integration messages to the data file (message to mark 
% the time of critical events and the image/interest area/condition 
% information for the trial)
%% run training session as a for loop
nTrials_training=4;
for i=1:nTrials_training
    
% STEP 7.1 
% Sending a 'TRIALID' message to mark the start of a trial in Data 
% Viewer.  This is different than the start of recording message 
% START that is logged when the trial recording begins. The viewer
% will not parse any messages, events, or samples, that exist in 
% the data file prior to this message. 
Eyelink('Message', 'TRIALID %d', i);

% This supplies the title at the bottom of the eyetracker display
Eyelink('command', 'record_status_message "TRAINING TRIAL %d / %d"', i, nTrials_training); 
% Before recording, we place reference graphics on the host display
% Must be offline to draw to EyeLink screen
Eyelink('Command', 'set_idle_mode');
% clear tracker display and draw box at center
Eyelink('Command', 'clear_screen 0')
Eyelink('command', 'draw_box %d %d %d %d 15', width/2-50, height/2-50, width/2+50, height/2+50);

% STEP 7.2
% Do a drift correction at the beginning of each trial
% Performing drift correction (checking) is optional for
% EyeLink 1000 eye trackers.

%Comment when testing
% EyelinkDoDriftCorrection(el);  

% STEP 7.3
% start recording eye position (preceded by a short pause so that 
% the tracker can finish the mode transition)
% The paramerters for the 'StartRecording' call controls the
% file_samples, file_events, link_samples, link_events availability
Eyelink('Command', 'set_idle_mode');
WaitSecs(0.05);
%         Eyelink('StartRecording', 1, 1, 1, 1);    
Eyelink('StartRecording');    
% record a few samples before we actually start displaying
% otherwise you may lose a few msec of data 
WaitSecs(0.1);
%read the current image according to the design matrix
% if Design_training(i,2)==1 %image version 1
%     ImgName=[stimuli_dir '/' num2str(Design_training(i,1)) '.jpg'];
%     %write Trial Variables
%     Eyelink('Message', '!V TRIAL_VAR imageFile %s%s',num2str(Design_training(i,1)), '.jpg');
%     imagePointer = strcat(imgload_stim_dir,'/',num2str(Design_training(i,1)),'.jpg');
%     Eyelink('Message', '!V TRIAL_VAR imageType NonGImage');
% elseif Design_training(i,2)==2 %image version 2
%     ImgName=[stimuli_dir '/' num2str(Design_training(i,1)) 'g.jpg'];
%     %write Trial Variables
%     Eyelink('Message', '!V TRIAL_VAR imageFile %s%s',num2str(Design_training(i,1)), 'g.jpg');
%     imagePointer = strcat(imgload_stim_dir,'/',num2str(Design_training(i,1)),'g.jpg');
%     Eyelink('Message', '!V TRIAL_VAR imageType GImage');
imagePointer = strcat(imgload_stim_dir,'/', 'Geology-', num2str(i),'.png');
ImgName=[stimuli_dir '/' 'Geology-' num2str(i) '.png'];
% end
Img=imread(ImgName);
% Img=imresize(Img,0.7);
%display fixation cross
ImgDsp(fixation,wPtr,fixation_duration,gray,ifi,1,'None',0,0);
%display the current image for Training duration
ImgDsp(Img,wPtr,Training_duration,gray,ifi,2,imagePointer,width,height);
%display noise mask
ImgDsp(NoiseMask,wPtr,NoiseMask_duration,gray,ifi,3,'None',0,0);
%Write the trial information
fprintf(datafile,'%d %d %d %d %d %d %d %2.4f\n',0,i,Design_training(i,1),Design_training(i,2),0,0,0,0);
WaitSecs(0.1);
% stop the recording of eye-movements for the current trial
Eyelink('StopRecording');
Eyelink('Message', 'TRIAL_RESULT 0')
%ISI
WaitSecs(Training_ISI);
end



%% run testing session as a for loop
DrawFormattedText(wPtr, 'Press the space bar to start testing', 'center', 'center', 0);
Screen('Flip',wPtr);
 while 1
    [ keyIsDown, Secs, keyCode ] = KbCheck;%check key press
     if keyIsDown
                if keyCode(44) %keycode 32 is Space bar. Mac 44
                    while KbCheck; end %wait till release key press, only one key press is recognized
                    break;
                end
     end
 end
 
for i=1:nTrials_testing
    
% STEP 7.1 
% Sending a 'TRIALID' message to mark the start of a trial in Data 
% Viewer.  This is different than the start of recording message 
% START that is logged when the trial recording begins. The viewer
% will not parse any messages, events, or samples, that exist in 
% the data file prior to this message. 
fprintf('hello');
Eyelink('Message', 'TRIALID %d', i);

% This supplies the title at the bottom of the eyetracker display
Eyelink('command', 'record_status_message "TESTING TRIAL %d / %d"', i, nTrials_training); 
% Before recording, we place reference graphics on the host display
% Must be offline to draw to EyeLink screen
Eyelink('Command', 'set_idle_mode');
% clear tracker display and draw box at center
Eyelink('Command', 'clear_screen 0')
Eyelink('command', 'draw_box %d %d %d %d 15', width/2-50, height/2-50, width/2+50, height/2+50);

% STEP 7.2
% Do a drift correction at the beginning of each trial
% Performing drift correction (checking) is optional for
% EyeLink 1000 eye trackers.

%Comment when testing
% EyelinkDoDriftCorrection(el);  

% STEP 7.3
% start recording eye position (preceded by a short pause so that 
% the tracker can finish the mode transition)
% The paramerters for the 'StartRecording' call controls the
% file_samples, file_events, link_samples, link_events availability
Eyelink('Command', 'set_idle_mode');
WaitSecs(0.05);
%         Eyelink('StartRecording', 1, 1, 1, 1);    
Eyelink('StartRecording');    
% record a few samples before we actually start displaying
% otherwise you may lose a few msec of data 
WaitSecs(0.1);
%read the current images according to the design matrix

%target
if Design_testing(i,2)==1 %image version 1
    ImgName=[stimuli_dir '/' num2str(Design_testing(i,1)) '.jpg'];
    imagePointer = strcat(imgload_stim_dir,'/',num2str(Design_training(i,1)),'.jpg');
elseif Design_testing(i,2)==2 %image version 2
    ImgName=[stimuli_dir '/' num2str(Design_testing(i,1)) 'g.jpg'];
    imagePointer = strcat(imgload_stim_dir,'/',num2str(Design_training(i,1)),'g.jpg');
end

%distractor
if Design_testing(i,4)==1 %image version 1
    ImgNameD=[stimuli_dir '/' num2str(Design_testing(i,3)) '.jpg'];
    imagePointerD = strcat(imgload_stim_dir,'/',num2str(Design_training(i,1)),'.jpg');
elseif Design_testing(i,4)==2 %image version 2
    ImgNameD=[stimuli_dir '/' num2str(Design_testing(i,3)) 'g.jpg'];
    imagePointerD = strcat(imgload_stim_dir,'/',num2str(Design_training(i,1)),'g.jpg');
end

%image location
if Design_testing(i,5)==1 % target on the left
ImgL=imread(ImgName);
% ImgL=imresize(ImgL,0.7);
ImgR=imread(ImgNameD);
% ImgR=imresize(ImgR,0.7);
Eyelink('Message', '!V TRIAL_VAR targetSide Left');
elseif Design_testing(i,5)==2 %target on the right
ImgR=imread(ImgName);
% ImgR=imresize(ImgR,0.7);
ImgL=imread(ImgNameD);
% ImgL=imresize(ImgL,0.7); 
Eyelink('Message', '!V TRIAL_VAR targetSide Right');
end    
%display fixation cross
ImgDsp(fixation,wPtr,fixation_duration,gray,ifi,1);

S1=size(ImgL);
S2=size(ImgR);
S2(2)=S2(2)/(S2(1)/S1(1)); 
S2(1)=S1(1); %Same hight
dist=100;%distance between two images
%display the two testing images till response
tex1=Screen('MakeTexture', wPtr, ImgL);
tex2=Screen('MakeTexture', wPtr, ImgR);
%Screen('DrawText',wPtr,num2str(trial),5,5);
%screen position left top right bottom
Screen('DrawTexture', wPtr, tex1,[],[(rect(3)- (S1(2)*2+dist))/2 (rect(4)- S1(1))/2 (rect(3)-dist)/2 (rect(4)+ S1(1))/2]);
Screen('DrawTexture', wPtr, tex2,[],[(rect(3)+dist)/2 (rect(4)- S2(1))/2 (rect(3)+ 2*S2(2)+dist)/2 (rect(4)+ S2(1))/2]);

Screen('Flip', wPtr);
Eyelink('Message', 'DISPLAY_IMAGES');
%you can add two additional arguments at the end of the IMGLOAD that
%specify the image width and heigh (in addition to position)

%XXXXXXXXXX Note from Marcus
% You will likely need to fix width/4, heigh/2 and width*3/4, height/2 for
% the following lines to represent the actual position
%you will also likely have to add two extra arguments for actual width and
%height of images used

if Design_testing(i,5)==1 % target on the left
Eyelink('Message', '!V IMGLOAD CENTER %s %d %d', imagePointer, width/4, height/2);
Eyelink('Message', '!V IMGLOAD CENTER %s %d %d', imagePointerD, width*3/4, height/2);
elseif Design_testing(i,5)==2 %target on the right
Eyelink('Message', '!V IMGLOAD CENTER %s %d %d', imagePointerD, width/4, height/2);
Eyelink('Message', '!V IMGLOAD CENTER %s %d %d', imagePointer, width*3/4, height/2);
%YOU PROBABLY WANT TO DO SOMETHING LIKE THE FOLLOWING, where imgWidth is the width of the image and imgHeight is
%the height of the image
%imgWidth = 200
%imgHeight = 400
%Eyelink('Message', '!V IMGLOAD CENTER %s %d %d %d %d', imgR, width/4, height/2, imgWidth, imgHeight);
%Eyelink('Message', '!V IMGLOAD CENTER %s %d %d %d %d', imgR, 3*width/4, height/2, imgWidth, imgHeight);
end

Start=GetSecs;
Screen('Close',tex1);
Screen('Close',tex2);


% collect response. 
  while 1
    [ keyIsDown, Secs, keyCode ] = KbCheck;%check key press
     if keyIsDown
                Eyelink('Message', 'KEY_PRESS_DETECTED');
                if keyCode(9) %'f', 70 Left. Mac 9 
                    while KbCheck; end %wait till release key press, only one key press is recognized?xv
                    fprintf(datafile,'%d %d %d %d %d %d %d %2.4f\n',1,i,Design_testing(i,1),Design_testing(i,2),Design_testing(i,3),1,Design_testing(i,5)==1,GetSecs-Start);
                    Eyelink('Message', '!V TRIAL_VAR keyValue 9');
                    break;
                elseif keyCode(13) %'j', 74 Right. Mac 13
                    while KbCheck; end
                    fprintf(datafile,'%d %d %d %d %d %d %d %2.4f\n',1,i,Design_testing(i,1),Design_testing(i,2),Design_testing(i,3),2,Design_testing(i,5)==2,GetSecs-Start);
                    Eyelink('Message', '!V TRIAL_VAR keyValue 13');
                    break;
                elseif keyCode(15) %'1', 76 know this person. Mac 15.
                    while KbCheck; end
                    fprintf(datafile,'%d %d %d %d %d %d %d %2.4f\n',1,i,Design_testing(i,1),Design_testing(i,2),Design_testing(i,3),3,3,0);
                    Eyelink('Message', '!V TRIAL_VAR keyValue 15');
                    break;
                end  
     end
  end
  ImgDsp(NoiseMask,wPtr,NoiseMask_duration,gray,ifi,3);  % erase stimulus
  WaitSecs(0.1);
  % stop the recording of eye-movements for the current trial
  Eyelink('StopRecording');
  Eyelink('Message', 'TRIAL_RESULT 0')
  %ISI
  WaitSecs(Testing_ISI);
end


 %% end of the experiment
DrawFormattedText(wPtr, 'End of the testing session.', 'center', 'center', 0);
Screen('Flip',wPtr);
 while 1
    [ keyIsDown, Secs, keyCode ] = KbCheck;%check key press
     if keyIsDown
                if keyCode(44) %Space bar. Windows 32. Mac 44
                    while KbCheck; end %wait till release key press, only one key press is recognized
                    break;
                end
     end
 end
Screen('Flip',wPtr);
fclose(datafile);%close the data file
% download data file
try
    fprintf('Receiving data file ''%s''\n', edfFile );
    status=Eyelink('ReceiveFile');
    if status > 0
        fprintf('ReceiveFile status %d\n', status);
    end
    if 2==exist(edfFile, 'file')
        fprintf('Data file ''%s'' can be found in ''%s''\n', edfFile, pwd );
    end
catch
    fprintf('Problem receiving data file ''%s''\n', edfFile );
end

% STEP 9
% close the eye tracker and window
  Eyelink('ShutDown');
  Screen('CloseAll');


Eyelink('ShutDown');
%      commandwindow;
%      rethrow(lasterr);
 %try..catch.



WaitSecs(0.5);
Screen('CloseAll');
ShowCursor;



